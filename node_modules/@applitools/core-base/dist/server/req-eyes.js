"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeReqEyes = void 0;
const req_1 = __importStar(require("@applitools/req"));
const utils = __importStar(require("@applitools/utils"));
function makeReqEyes({ config, fetch, logger }) {
    var _a;
    return (0, req_1.makeReq)({
        baseUrl: config.serverUrl,
        query: { apiKey: config.apiKey, removeSession: config.removeSession },
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            'x-applitools-eyes-client': config.agentId,
            'User-Agent': config.agentId,
        },
        proxy: config.proxy,
        timeout: (_a = config.connectionTimeout) !== null && _a !== void 0 ? _a : 300000 /* 5min */,
        retry: [
            // retry on network issues
            {
                limit: 5,
                timeout: 200,
                statuses: [404, 500, 502, 504],
                codes: ['ECONNRESET', 'ECONNABORTED', 'ETIMEDOUT', 'ENOTFOUND', 'EAI_AGAIN'],
            },
            // retry on requests that were blocked by concurrency
            {
                timeout: [...Array(5).fill(2000) /* 5x2s */, ...Array(4).fill(5000) /* 4x5s */, 10000 /* 10s */],
                statuses: [503],
            },
        ],
        hooks: [handleLongRequests({ req: req_1.default }), handleLogs({ logger }), handleUnexpectedResponse()],
        fetch,
    });
}
exports.makeReqEyes = makeReqEyes;
function handleLogs({ logger: defaultLogger } = {}) {
    const guid = utils.general.guid();
    let counter = 0;
    return {
        beforeRequest({ request, options }) {
            var _a;
            const logger = (_a = options === null || options === void 0 ? void 0 : options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            let requestId = request.headers.get('x-applitools-eyes-client-request-id');
            if (!requestId) {
                requestId = `${counter++}--${guid}`;
                request.headers.set('x-applitools-eyes-client-request-id', requestId);
            }
            logger === null || logger === void 0 ? void 0 : logger.log(`Request "${options === null || options === void 0 ? void 0 : options.name}" [${requestId}] will be sent to the address "[${request.method}]${request.url}" with body`, options === null || options === void 0 ? void 0 : options.body);
        },
        beforeRetry({ request, attempt, error, response, options }) {
            var _a;
            const logger = (_a = options === null || options === void 0 ? void 0 : options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            const requestId = request.headers.get('x-applitools-eyes-client-request-id');
            logger === null || logger === void 0 ? void 0 : logger.log(`Request "${options === null || options === void 0 ? void 0 : options.name}" [${requestId}] that was sent to the address "[${request.method}]${request.url}" with body`, options === null || options === void 0 ? void 0 : options.body, `is going to retried due to ${error ? 'an error' : 'a response with status'}`, error !== null && error !== void 0 ? error : `${response.statusText}(${response.status})`);
            request.headers.set('x-applitools-eyes-client-request-id', `${requestId.split('#', 1)[0]}#${attempt + 1}`);
        },
        async afterResponse({ request, response, options }) {
            var _a;
            const logger = (_a = options === null || options === void 0 ? void 0 : options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            const requestId = request.headers.get('x-applitools-eyes-client-request-id');
            logger === null || logger === void 0 ? void 0 : logger.log(`Request "${options === null || options === void 0 ? void 0 : options.name}" [${requestId}] that was sent to the address "[${request.method}]${request.url}" respond with ${response.statusText}(${response.status})`, !response.ok ? `and body ${JSON.stringify(await response.clone().text())}` : '');
        },
        afterError({ request, error, options }) {
            var _a;
            const logger = (_a = options === null || options === void 0 ? void 0 : options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            const requestId = request.headers.get('x-applitools-eyes-client-request-id');
            logger === null || logger === void 0 ? void 0 : logger.error(`Request "${options === null || options === void 0 ? void 0 : options.name}" [${requestId}] that was sent to the address "[${request.method}]${request.url}" failed with error`, error);
        },
    };
}
function handleUnexpectedResponse() {
    return {
        async afterResponse({ request, response, options }) {
            if ((options === null || options === void 0 ? void 0 : options.expected) &&
                (utils.types.isArray(options === null || options === void 0 ? void 0 : options.expected)
                    ? !options.expected.includes(response.status)
                    : options.expected !== response.status)) {
                throw new Error(`Request "${options === null || options === void 0 ? void 0 : options.name}" that was sent to the address "[${request.method}]${request.url}" failed due to unexpected status ${response.statusText}(${response.status})`);
            }
        },
    };
}
function handleLongRequests({ req }) {
    return {
        beforeRequest({ request }) {
            request.headers.set('Eyes-Expect-Version', '2');
            request.headers.set('Eyes-Expect', '202+location');
            request.headers.set('Eyes-Date', new Date().toUTCString());
        },
        async afterResponse({ request, response, options }) {
            if (response.status === 202 && response.headers.has('Location')) {
                if (response.headers.has('Retry-After')) {
                    await utils.general.sleep(Number(response.headers.get('Retry-After')) * 1000);
                }
                // polling for result
                const pollResponse = await req(response.headers.get('Location'), options !== null && options !== void 0 ? options : {}, {
                    method: 'GET',
                    body: undefined,
                    expected: undefined,
                    retry: {
                        statuses: [200],
                        timeout: [...Array(5).fill(1000) /* 5x1s */, ...Array(5).fill(2000) /* 5x2s */, 5000 /* 5s */],
                    },
                    hooks: {
                        beforeRetry({ request, response }) {
                            if (response && response.status === 200 && response.headers.has('Location')) {
                                return { request, url: response.headers.get('Location') };
                            }
                        },
                    },
                });
                // getting result of the initial request
                const resultResponse = await req(pollResponse.headers.get('Location'), options !== null && options !== void 0 ? options : {}, {
                    method: 'DELETE',
                    expected: undefined,
                    hooks: {
                        beforeRetry({ response, stop }) {
                            // if the long request is blocked due to concurrency the whole long request should start over
                            if ((response === null || response === void 0 ? void 0 : response.status) === 503)
                                return stop;
                        },
                    },
                });
                return resultResponse.status === 503 ? req(request, options !== null && options !== void 0 ? options : {}) : resultResponse;
            }
        },
    };
}
