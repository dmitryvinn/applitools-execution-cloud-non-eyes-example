import type { Core, Eyes, FunctionalSession, ServerSettings, OpenSettings, ReportSettings, VisualTest, FunctionalTest } from '../types';
import { type Fetch } from '@applitools/req';
import { type Logger } from '@applitools/logger';
import { type ReqEyes } from './req-eyes';
import { type Upload } from './upload';
export interface CoreRequests extends Core {
    openEyes(options: {
        settings: OpenSettings;
        logger?: Logger;
    }): Promise<EyesRequests>;
    openFunctionalSession(options: {
        settings: OpenSettings;
        logger?: Logger;
    }): Promise<FunctionalSessionRequests>;
    getBatchBranches(options: {
        settings: ServerSettings & {
            batchId: string;
        };
        logger?: Logger;
    }): Promise<{
        branchName?: string;
        parentBranchName?: string;
    }>;
}
export interface EyesRequests extends Eyes {
    readonly core: CoreRequests;
    report(options: {
        settings?: ReportSettings;
        logger?: Logger;
    }): Promise<void>;
}
export interface FunctionalSessionRequests extends FunctionalSession {
    readonly core: CoreRequests;
    report(options: {
        settings?: ReportSettings;
        logger?: Logger;
    }): Promise<void>;
}
export declare function makeCoreRequests({ agentId: defaultAgentId, fetch, logger: defaultLogger, }: {
    agentId: string;
    fetch?: Fetch;
    logger?: Logger;
}): CoreRequests;
export declare function makeEyesRequests({ core, test, req, upload, logger: mainLogger, }: {
    core: CoreRequests;
    test: VisualTest;
    req: ReqEyes;
    upload: Upload;
    logger: Logger;
}): EyesRequests;
export declare function makeFunctionalSessionRequests({ core, test, req, logger: mainLogger, }: {
    core: CoreRequests;
    test: FunctionalTest;
    req: ReqEyes;
    logger: Logger;
}): FunctionalSessionRequests;
