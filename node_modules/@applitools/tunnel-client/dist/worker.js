"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTunnelClientWorker = void 0;
const logger_1 = require("@applitools/logger");
const socket_1 = require("@applitools/socket");
const client_1 = require("./client");
const generator_1 = require("./generator");
const fetch_resource_1 = require("./fetch-resource");
const metrics_1 = require("./metrics");
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const LOG_DIRNAME = (_a = process.env.APPLITOOLS_LOG_DIR) !== null && _a !== void 0 ? _a : path.resolve(os.tmpdir(), `applitools-tunnel-client-logs`);
function makeTunnelClientWorker({ settings, logger: defaultLogger, }) {
    const logger = (0, logger_1.makeLogger)({
        logger: defaultLogger,
        handler: { type: 'rolling file', name: 'tunnel-client', dirname: LOG_DIRNAME },
        format: { label: 'tunnel-client', colors: false },
    });
    const client = (0, client_1.makeTunnelClient)({ settings, logger });
    const generator = (0, generator_1.makeGenerator)({ settings: { ...settings, envInfo: (0, metrics_1.extractEnvInfo)() }, logger });
    const socket = (0, socket_1.makeSocket)(generator, { transport: 'generator', logger });
    const interval = setInterval(async () => {
        socket.emit('TunnelClient.list', await client.list());
        socket.emit('TunnelClient.metrics', (0, metrics_1.extractCurrentUsage)());
    }, 20000);
    socket.command('TunnelClient.create', client.create);
    socket.command('TunnelClient.replace', client.replace);
    socket.command('TunnelClient.destroy', client.destroy);
    socket.command('TunnelClient.fetch', fetch_resource_1.fetchResource);
    socket.on('TunnelClient.close', async (reason) => {
        logger.fatal('Worker is going to be closed due to a reason', reason);
        clearInterval(interval);
        await client.close();
    });
    socket.on('error', async (reason) => {
        logger.fatal('Worker is going to be closed due to an error', reason);
        clearInterval(interval);
        await client.close();
    });
    return socket;
}
exports.makeTunnelClientWorker = makeTunnelClientWorker;
