"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeServer = void 0;
const http_1 = require("http");
const core_base_1 = require("@applitools/core-base");
const router_1 = require("./utils/router");
const manager_1 = require("./tunnels/manager");
const manager_client_1 = require("./tunnels/manager-client");
const req_proxy_1 = require("./req-proxy");
const start_session_1 = require("./commands/start-session");
const execute_script_1 = require("./commands/execute-script");
const end_session_1 = require("./commands/end-session");
const find_element_1 = require("./commands/find-element");
const utils = __importStar(require("@applitools/utils"));
async function makeServer({ settings, logger: mainLogger, }) {
    var _a, _b;
    const serverLogger = mainLogger.extend();
    const req = (0, req_proxy_1.makeReqProxy)({
        targetUrl: settings.serverUrl,
        proxy: settings.proxy,
        retry: {
            validate: async ({ response, error }) => {
                if (error)
                    return !utils.types.instanceOf(error, 'AbortError');
                if (response)
                    return response.status >= 500 && !utils.types.has(await response.clone().json(), 'value');
                return false;
            },
            limit: 10,
            timeout: 5000,
        },
    });
    const core = (0, core_base_1.makeCore)({ agentId: `js/ec-client/${require('../package.json').version}` });
    const tunnels = ((_a = settings.tunnel) === null || _a === void 0 ? void 0 : _a.serviceUrl)
        ? await (0, manager_1.makeTunnelManager)({ settings: settings.tunnel, logger: serverLogger })
        : await (0, manager_client_1.makeTunnelManagerClient)({ settings: settings.tunnel });
    const sessions = new Map();
    const commands = {
        startSession: (0, start_session_1.makeStartSession)({ settings, req, tunnels }),
        endSession: (0, end_session_1.makeEndSession)({ req, tunnels }),
        executeScript: (0, execute_script_1.makeExecuteScript)({ req, core }),
        findElement: (0, find_element_1.makeFindElement)({ req }),
    };
    const server = (0, http_1.createServer)((0, router_1.makeCallback)(({ router, request, response }) => {
        const requestLogger = serverLogger.extend({ tags: [`proxy-request-${utils.general.shortid()}`] });
        requestLogger.log(`Received request [${request.method}] ${request.url}`);
        router.post('/session', async () => {
            const session = await commands.startSession({ request, response, logger: requestLogger });
            sessions.set(session.sessionId, session);
        });
        router.post('/session/:sessionId/execute/sync', async ({ match }) => {
            const session = sessions.get(match.groups.sessionId);
            await commands.executeScript({ session, request, response, logger: requestLogger });
        });
        router.post('/session/:sessionId/element', async ({ match }) => {
            const session = sessions.get(match.groups.sessionId);
            await commands.findElement({ session, request, response, logger: requestLogger });
        });
        router.delete('/session/:sessionId', async ({ match }) => {
            const session = sessions.get(match.groups.sessionId);
            await commands.endSession({ session, request, response, logger: requestLogger });
            sessions.delete(session.sessionId);
        });
        router.any(async () => {
            requestLogger.log('Passthrough request');
            await req(request.url, { io: { request, response }, logger: requestLogger });
        });
        router.catch(async ({ error }) => {
            requestLogger.error(`Error during processing request`, error);
            if (response.writableEnded)
                return;
            response
                .writeHead(500)
                .end(JSON.stringify({ value: { error: 'internal proxy server error', message: error.message, stacktrace: '' } }));
        });
        router.finally(async () => {
            requestLogger.log(`Request was responded with status ${response.statusCode}`);
        });
    }));
    server.listen({ port: (_b = settings.port) !== null && _b !== void 0 ? _b : 0, hostname: 'localhost' });
    return new Promise((resolve, reject) => {
        server.on('listening', () => {
            const address = server.address();
            serverLogger.log(`Proxy server has started on port ${address.port}`);
            resolve({
                url: `http://localhost:${address.port}`,
                port: address.port,
                unref: () => server.unref(),
                close: () => server.close(),
            });
        });
        server.on('error', async (err) => {
            serverLogger.fatal('Error starting proxy server', err);
            reject(err);
        });
    });
}
exports.makeServer = makeServer;
