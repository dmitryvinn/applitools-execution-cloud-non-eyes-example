"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeReqProxy = void 0;
const req_1 = require("@applitools/req");
const utils = __importStar(require("@applitools/utils"));
function makeReqProxy(config) {
    return (0, req_1.makeReq)({
        baseUrl: config.targetUrl,
        proxy: config.proxy,
        retry: config.retry,
        hooks: {
            afterOptionsMerged({ options }) {
                var _a, _b, _c;
                (_a = options.method) !== null && _a !== void 0 ? _a : (options.method = (_b = options.io.request.method) !== null && _b !== void 0 ? _b : 'GET');
                options.headers = {
                    ...options.io.request.headers,
                    ...options.headers,
                    host: options.baseUrl && new URL(options.baseUrl).host,
                };
                if (['POST', 'PUT', 'PATCH'].includes(options.method.toUpperCase())) {
                    (_c = options.body) !== null && _c !== void 0 ? _c : (options.body = utils.streams.persist(options.io.request));
                }
                if (options.body === undefined) {
                    delete options.headers['content-type'];
                }
                else if (!utils.types.isFunction(options.body, 'pipe')) {
                    options.headers['content-length'] = Buffer.byteLength(utils.types.isArray(options.body) || utils.types.isPlainObject(options.body) || options.body === null
                        ? JSON.stringify(options.body)
                        : options.body).toString();
                }
            },
            afterResponse({ response, options }) {
                const io = options === null || options === void 0 ? void 0 : options.io;
                if (io) {
                    if (!response.headers.has('connection')) {
                        if (io.request.httpVersion === '1.0') {
                            response.headers.set('connection', 'close');
                        }
                        else if (io.request.httpVersion !== '2.0') {
                            response.headers.set('connection', io.request.headers.connection || 'keep-alive');
                        }
                    }
                    io.response.sendDate = false;
                    if (io.handle !== false) {
                        io.response.writeHead(response.status, Object.fromEntries(response.headers.entries()));
                        if (response.body)
                            response.body.pipe(io.response);
                        else
                            io.response.end();
                    }
                }
            },
        },
        logger: config.logger,
    });
}
exports.makeReqProxy = makeReqProxy;
