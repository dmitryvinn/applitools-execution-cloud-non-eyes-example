/// <reference types="node" />
import type { Location, Size, Region } from '@applitools/utils';
export interface Image {
    isImage: true;
    size: Size;
    unscaledSize: Size;
    rawSize: Size;
    transforms: Transforms;
    width: number;
    height: number;
    scale(ratio: number): Image;
    rotate(degrees: number): Image;
    crop(region: any): Image;
    copy(srcImage: Image, offset: any): Image;
    frame(topImage: Image, bottomImage: Image, region: any): Image;
    toRaw(): Promise<ImageRaw>;
    toBuffer(): Promise<Buffer>;
    toPng(): Promise<Buffer>;
    toFile(path: string): Promise<void>;
    toObject(): Promise<ImageRaw>;
    debug(debug: any): Promise<void>;
}
type ImageSource = string | Buffer | Image | (Size & {
    data?: Buffer;
}) | {
    auto: true;
};
type ImageRaw = {
    width: number;
    height: number;
    data: Buffer;
};
type Transforms = {
    rotate: number;
    scale: number;
    crop?: Region;
    modifiers: ({
        type: 'copy';
        image: Promise<ImageRaw>;
        offset: Location;
    } | {
        type: 'frame';
        top: Promise<ImageRaw>;
        bottom: Promise<ImageRaw>;
        region: Region;
    })[];
    added?: any;
};
export declare function makeImage(data: ImageSource): Image;
export {};
