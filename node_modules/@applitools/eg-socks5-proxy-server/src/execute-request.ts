import net from 'net'

import {RFC_1928_REPLIES} from './constants'
import {convertSocketErrorToRpcReply} from './utils/convert-socket-error-to-rpc-reply'

import {ExecuteReqeustError, ExecuteRequestParameters} from '../types/execute-request'

export function executeRequest({
  originalSocket,
  address,
  port,
  requestBuffer,
  addressType,
  end,
  onError,
  onConnect,
}: ExecuteRequestParameters) {
  const destination = net.createConnection(port, address, () => {
    // prepare a success response
    const responseBuffer = Buffer.alloc(requestBuffer.length)
    requestBuffer.copy(responseBuffer)
    responseBuffer[1] = RFC_1928_REPLIES.SUCCEEDED

    // write acknowledgement to client...
    originalSocket.write(responseBuffer, () => {
      // listen for data bi-directionally
      destination.pipe(originalSocket)
      originalSocket.pipe(destination)
    })
  })

  destination.setKeepAlive(true)

  // capture successful connection
  destination.on('connect', () => {
    onConnect(destination)
  })

  // capture connection errors and response appropriately
  destination.on('error', (err: ExecuteReqeustError) => {
    // notify of connection error
    err.addr = address
    err.atyp = addressType
    err.port = port

    onError(err)

    const rpcReply = convertSocketErrorToRpcReply(err)
    return end(rpcReply, {requestBuffer})
  })

  return destination
}
