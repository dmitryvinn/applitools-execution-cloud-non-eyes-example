"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeRequestThroughRemoteProxy = void 0;
const net_1 = __importDefault(require("net"));
const constants_1 = require("./constants");
const convert_socket_error_to_rpc_reply_1 = require("./utils/convert-socket-error-to-rpc-reply");
function executeRequestThroughRemoteProxy({ originalSocket, proxyServer, addressType, address, port, requestBuffer, clientHandshakeBuffer, end, onError, onConnect, }) {
    let stopTimeout;
    const destination = net_1.default.createConnection(proxyServer.port, proxyServer.address, () => {
        // prepare a success response
        const responseBuffer = Buffer.alloc(requestBuffer.length);
        requestBuffer.copy(responseBuffer);
        responseBuffer[1] = constants_1.RFC_1928_REPLIES.SUCCEEDED;
        const onHandshakeCompleted = (_data) => {
            ;
            [stopTimeout] = _writeAndWaitForResponse({
                socket: destination,
                data: requestBuffer,
                timeout: proxyServer.rpcReplyTimeout || 5000,
                onTimeout: () => {
                    destination.destroy();
                    proxyServer.onRpc1928ReplyTimeout();
                },
                onComplete: (data) => {
                    originalSocket.write(data, () => {
                        destination.pipe(originalSocket);
                        originalSocket.pipe(destination);
                    });
                    proxyServer.onRpc1928Reply(data);
                },
            });
            proxyServer.onHandshakeCompleted();
        };
        [stopTimeout] = _writeAndWaitForResponse({
            socket: destination,
            data: clientHandshakeBuffer,
            timeout: proxyServer.handshakeTimeout || 5000,
            onTimeout: () => {
                destination.destroy();
                proxyServer.onHandshakeTimeout();
            },
            onComplete: onHandshakeCompleted,
        });
    });
    destination.setKeepAlive(true);
    // capture successful connection
    destination.on('connect', () => {
        onConnect(destination);
    });
    // capture connection errors and response appropriately
    destination.on('error', (err) => {
        stopTimeout && stopTimeout();
        // notify of connection error
        err.addr = address;
        err.atyp = addressType;
        err.port = port;
        onError(err);
        const rpcReply = (0, convert_socket_error_to_rpc_reply_1.convertSocketErrorToRpcReply)(err);
        return end(rpcReply, { requestBuffer });
    });
    return destination;
}
exports.executeRequestThroughRemoteProxy = executeRequestThroughRemoteProxy;
function _writeAndWaitForResponse({ socket, data, timeout, onTimeout, onComplete, }) {
    let wasTimeoutCalled = false;
    const timeoutId = setTimeout(() => {
        wasTimeoutCalled = true;
        onTimeout();
    }, timeout);
    const stopTimeoutFn = () => clearTimeout(timeoutId);
    socket.write(data, () => {
        socket.once('data', (response) => {
            if (wasTimeoutCalled)
                return;
            stopTimeoutFn();
            onComplete(response);
        });
    });
    return [stopTimeoutFn];
}
//# sourceMappingURL=execute-request-through-remote-proxy.js.map