"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeRequest = void 0;
const net_1 = __importDefault(require("net"));
const constants_1 = require("./constants");
const convert_socket_error_to_rpc_reply_1 = require("./utils/convert-socket-error-to-rpc-reply");
function executeRequest({ originalSocket, address, port, requestBuffer, addressType, end, onError, onConnect, }) {
    const destination = net_1.default.createConnection(port, address, () => {
        // prepare a success response
        const responseBuffer = Buffer.alloc(requestBuffer.length);
        requestBuffer.copy(responseBuffer);
        responseBuffer[1] = constants_1.RFC_1928_REPLIES.SUCCEEDED;
        // write acknowledgement to client...
        originalSocket.write(responseBuffer, () => {
            // listen for data bi-directionally
            destination.pipe(originalSocket);
            originalSocket.pipe(destination);
        });
    });
    destination.setKeepAlive(true);
    // capture successful connection
    destination.on('connect', () => {
        onConnect(destination);
    });
    // capture connection errors and response appropriately
    destination.on('error', (err) => {
        // notify of connection error
        err.addr = address;
        err.atyp = addressType;
        err.port = port;
        onError(err);
        const rpcReply = (0, convert_socket_error_to_rpc_reply_1.convertSocketErrorToRpcReply)(err);
        return end(rpcReply, { requestBuffer });
    });
    return destination;
}
exports.executeRequest = executeRequest;
//# sourceMappingURL=execute-request.js.map