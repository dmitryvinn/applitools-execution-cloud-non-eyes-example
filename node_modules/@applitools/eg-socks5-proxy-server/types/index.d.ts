import {Socket, Server} from 'net'
export interface SetProxyServerOptions {
  address: string
  port: number
  shouldUseProxy?: (data: {
    socket: Socket
    destinationInfo: AddressInfo
    originInfo: AddressInfo
  }) => boolean
}

export interface ProxyServers {
  shouldUseProxy?: (data: {
    socket: Socket
    destinationInfo: AddressInfo
    originInfo: AddressInfo
  }) => boolean
  getAvailableProxy: () => SingleProxyOptions
}

export interface ISocksServer {
  server: Server
  on: (event: string, listener: (...args: any[]) => void) => void
  listen: (...args: any[]) => void
  listenAsync: (port: number, host?: string) => void
  close: (...args: any[]) => void
  getConnections: (cb: (error: Error | null, count: number) => void) => void

  setProxyServer: (proxyServer: SetProxyServerOptions) => void
  setProxyServers: (proxyServers: ProxyServers) => void
  getProxyServers: () => ProxyServers | undefined
}

import * as Commons from './utils'
import {AddressInfo, SingleProxyOptions} from './utils'

export type Socks5ProxyOptions = Commons.Socks5ProxyOptions
