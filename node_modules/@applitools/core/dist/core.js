"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCore = void 0;
const logger_1 = require("@applitools/logger");
const core_base_1 = require("@applitools/core-base");
const get_viewport_size_1 = require("./automation/get-viewport-size");
const set_viewport_size_1 = require("./automation/set-viewport-size");
const get_nml_client_1 = require("./automation/get-nml-client");
const locate_1 = require("./locate");
const locate_text_1 = require("./locate-text");
const extract_text_1 = require("./extract-text");
const open_eyes_1 = require("./open-eyes");
const make_manager_1 = require("./make-manager");
const close_batch_1 = require("./close-batch");
const delete_test_1 = require("./delete-test");
const get_ec_client_1 = require("./get-ec-client");
const utils = __importStar(require("@applitools/utils"));
function makeCore({ spec, concurrency, base: defaultBase, agentId = 'core', cwd = process.cwd(), logger: defaultLogger, } = {}) {
    const logger = (0, logger_1.makeLogger)({ logger: defaultLogger, format: { label: 'core' } });
    logger.log(`Core is initialized ${defaultBase ? 'with' : 'without'} custom base core`);
    const base = defaultBase !== null && defaultBase !== void 0 ? defaultBase : (0, core_base_1.makeCore)({ agentId, cwd, logger });
    return utils.general.extend(base, core => {
        return {
            base: base,
            getViewportSize: spec && (0, get_viewport_size_1.makeGetViewportSize)({ spec, logger }),
            setViewportSize: spec && (0, set_viewport_size_1.makeSetViewportSize)({ spec, logger }),
            getNMLClient: (0, get_nml_client_1.makeGetNMLClient)({ logger }),
            getECClient: (0, get_ec_client_1.makeGetECClient)({ logger }),
            makeManager: (0, make_manager_1.makeMakeManager)({ spec, concurrency, core, base: defaultBase, agentId, logger }),
            locate: (0, locate_1.makeLocate)({ spec, core, logger }),
            locateText: (0, locate_text_1.makeLocateText)({ spec, core, logger }),
            extractText: (0, extract_text_1.makeExtractText)({ spec, core, logger }),
            openEyes: (0, open_eyes_1.makeOpenEyes)({ spec, core, concurrency, logger }),
            closeBatch: (0, close_batch_1.makeCloseBatch)({ core, logger }),
            deleteTest: (0, delete_test_1.makeDeleteTest)({ core, logger }),
        };
    });
}
exports.makeCore = makeCore;
