"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetManagerResults = void 0;
const test_error_1 = require("./errors/test-error");
const internal_error_1 = require("./errors/internal-error");
const separate_duplicate_results_1 = require("./utils/separate-duplicate-results");
const utils = __importStar(require("@applitools/utils"));
function makeGetManagerResults({ core, storage, logger: mainLogger, }) {
    return async function getManagerResults({ settings, logger = mainLogger, } = {}) {
        var _a, _b, _c;
        logger = logger.extend(mainLogger, { tags: [`get-eyes-manager-${utils.general.shortid()}`] });
        let containers = await storage.reduce(async (promise, eyes) => {
            try {
                const results = await eyes.getResults({ settings: { ...settings, throwErr: false }, logger });
                return promise.then(containers => {
                    return containers.concat(results.map(result => ({
                        result,
                        error: result.status !== 'Passed' ? new test_error_1.TestError(result) : undefined,
                        userTestId: result.userTestId,
                        renderer: result.renderer,
                    })));
                });
            }
            catch (error) {
                return promise.then(containers => containers.concat({ error: new internal_error_1.InternalError(error), ...error.info }));
            }
        }, Promise.resolve([]));
        if (settings === null || settings === void 0 ? void 0 : settings.removeDuplicateTests) {
            logger.log('User opted into removing duplicate tests, checking for duplicates...');
            const [dedupedContainers, duplicateContainers] = (0, separate_duplicate_results_1.separateDuplicateResults)(containers);
            containers = dedupedContainers;
            if (!duplicateContainers.length)
                logger.log('No duplicate tests found.');
            else {
                await Promise.all(duplicateContainers.map(async (container) => {
                    if (container.result) {
                        await core.deleteTest({
                            settings: {
                                ...container.result.server,
                                testId: container.result.id,
                                batchId: container.result.batchId,
                                secretToken: container.result.secretToken,
                            },
                        });
                    }
                }));
                logger.log('Done cleaning up duplicate tests!');
            }
        }
        const batches = storage.reduce((batches, eyes) => {
            if (!eyes.test.keepBatchOpen) {
                const settings = { ...eyes.test.server, batchId: eyes.test.batchId };
                batches[`${settings.serverUrl}:${settings.apiKey}:${settings.batchId}`] = settings;
            }
            return batches;
        }, {});
        await core.closeBatch({ settings: Object.values(batches), logger }).catch(() => null);
        const summary = {
            results: containers,
            passed: 0,
            unresolved: 0,
            failed: 0,
            exceptions: 0,
            mismatches: 0,
            missing: 0,
            matches: 0,
        };
        for (const container of summary.results) {
            if (container.error) {
                if (settings === null || settings === void 0 ? void 0 : settings.throwErr)
                    throw container.error;
                summary.exceptions += 1;
            }
            if (container.result) {
                if (container.result.status === 'Failed')
                    summary.failed += 1;
                else if (container.result.status === 'Passed')
                    summary.passed += 1;
                else if (container.result.status === 'Unresolved')
                    summary.unresolved += 1;
                summary.matches += (_a = container.result.matches) !== null && _a !== void 0 ? _a : 0;
                summary.missing += (_b = container.result.missing) !== null && _b !== void 0 ? _b : 0;
                summary.mismatches += (_c = container.result.mismatches) !== null && _c !== void 0 ? _c : 0;
            }
        }
        return summary;
    };
}
exports.makeGetManagerResults = makeGetManagerResults;
