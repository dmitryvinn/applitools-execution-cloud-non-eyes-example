"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetEyesResults = void 0;
const test_error_1 = require("./errors/test-error");
const utils = __importStar(require("@applitools/utils"));
function makeGetEyesResults({ eyes, logger: mainLogger, }) {
    return async function getEyesResults({ settings, logger = mainLogger, } = {}) {
        logger = logger.extend(mainLogger, { tags: [`get-eyes-results-${utils.general.shortid()}`] });
        const typedEyes = await eyes.getTypedEyes({ logger });
        const results = await typedEyes.getResults({ settings, logger });
        if (settings === null || settings === void 0 ? void 0 : settings.throwErr) {
            results.forEach(result => {
                if (result.status !== 'Passed')
                    throw new test_error_1.TestError(result);
            });
        }
        return results;
    };
}
exports.makeGetEyesResults = makeGetEyesResults;
