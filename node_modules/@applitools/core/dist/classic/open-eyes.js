"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOpenEyes = void 0;
const driver_1 = require("@applitools/driver");
const get_base_eyes_1 = require("./get-base-eyes");
const check_1 = require("./check");
const check_and_close_1 = require("./check-and-close");
const close_1 = require("./close");
const abort_1 = require("./abort");
const utils = __importStar(require("@applitools/utils"));
function makeOpenEyes({ core, spec, logger: mainLogger }) {
    return async function openEyes({ target, settings, base, logger = mainLogger, }) {
        var _a, _b, _c;
        var _d;
        logger = logger.extend(mainLogger);
        logger.log(`Command "openEyes" is called with ${target ? 'default driver and' : ''}`, ...(settings ? ['settings', settings] : []), base ? 'predefined eyes' : '');
        const driver = target && (await (0, driver_1.makeDriver)({ spec, driver: target, logger, customConfig: settings }));
        if (driver && !base) {
            const environment = await driver.getEnvironment();
            const currentContext = driver.currentContext;
            (_a = settings.environment) !== null && _a !== void 0 ? _a : (settings.environment = {});
            if (environment.isEC) {
                settings.environment.ecSessionId = (await driver.getSessionId());
            }
            if (environment.isWeb) {
                (_b = (_d = settings.environment).userAgent) !== null && _b !== void 0 ? _b : (_d.userAgent = await driver.getUserAgentLegacy());
            }
            if (!settings.environment.deviceName && environment.deviceName) {
                settings.environment.deviceName = environment.deviceName;
            }
            if (!settings.environment.os) {
                if (environment.isNative && environment.platformName) {
                    settings.environment.os = environment.platformName;
                    if (!settings.keepPlatformNameAsIs) {
                        if (/^android/i.test(settings.environment.os)) {
                            settings.environment.os = `Android${settings.environment.os.slice(7)}`;
                        }
                        if (/^ios/i.test(settings.environment.os)) {
                            settings.environment.os = `iOS${settings.environment.os.slice(3)}`;
                        }
                    }
                    if (environment.platformVersion) {
                        settings.environment.os += ` ${environment.platformVersion}`;
                    }
                }
                else if (environment.isReliable &&
                    environment.isChromium &&
                    ((environment.isWindows && Number.parseInt(environment.browserVersion) >= 107) ||
                        (environment.isMac && Number.parseInt(environment.browserVersion) >= 90))) {
                    settings.environment.os = `${environment.platformName} ${(_c = environment.platformVersion) !== null && _c !== void 0 ? _c : ''}`.trim();
                }
            }
            if (!settings.environment.viewportSize || environment.isMobile) {
                const viewport = await driver.getViewport();
                const size = await driver.getViewportSize();
                settings.environment.viewportSize = utils.geometry.scale(size, viewport.viewportScale);
            }
            else {
                await driver.setViewportSize(settings.environment.viewportSize);
            }
            await currentContext.focus();
        }
        base !== null && base !== void 0 ? base : (base = [await core.base.openEyes({ settings, logger })]);
        return utils.general.extend(base[0], eyes => ({
            type: 'classic',
            core,
            getBaseEyes: (0, get_base_eyes_1.makeGetBaseEyes)({ settings, eyes, base, logger }),
            check: (0, check_1.makeCheck)({ eyes, target: driver, spec, logger }),
            checkAndClose: (0, check_and_close_1.makeCheckAndClose)({ eyes, target: driver, spec, logger }),
            close: (0, close_1.makeClose)({ eyes, target: driver, spec, logger }),
            abort: (0, abort_1.makeAbort)({ eyes, target: driver, spec, logger }),
        }));
    };
}
exports.makeOpenEyes = makeOpenEyes;
