"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRefer = void 0;
const utils = __importStar(require("@applitools/utils"));
const REF_ID = 'applitools-ref-id';
function makeRefer() {
    const store = new Map();
    const relation = new Map();
    return { isRef, ref, deref, destroy };
    function isRef(ref) {
        return Boolean(ref[REF_ID]);
    }
    function ref(value, parentRef) {
        const ref = utils.general.guid();
        store.set(ref, value);
        if (parentRef) {
            let childRefs = relation.get(parentRef[REF_ID]);
            if (!childRefs) {
                childRefs = new Set();
                relation.set(parentRef[REF_ID], childRefs);
            }
            childRefs.add({ [REF_ID]: ref });
        }
        return { [REF_ID]: ref };
    }
    function deref(ref) {
        if (isRef(ref)) {
            return store.get(ref[REF_ID]);
        }
        else {
            return ref;
        }
    }
    function destroy(ref) {
        if (!isRef(ref))
            return;
        const childRefs = relation.get(ref[REF_ID]);
        if (childRefs) {
            childRefs.forEach(childRef => destroy(childRef));
        }
        store.delete(ref[REF_ID]);
    }
}
exports.makeRefer = makeRefer;
