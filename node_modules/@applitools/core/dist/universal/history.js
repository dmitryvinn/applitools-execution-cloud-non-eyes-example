"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withHistory = void 0;
//TODO Design a better history tracker
function withHistory(socket) {
    const history = {
        managers: new Map(),
        eyes: new Map(),
        startedAt: new Date().toISOString(),
    };
    const originalCommand = socket.command;
    socket.command = function command(name, fn) {
        return originalCommand(name, async (payload) => {
            let result, error;
            try {
                result = await fn(payload);
                return result;
            }
            catch (err) {
                error = err;
                throw error;
            }
            finally {
                if (name === 'Core.makeManager') {
                    const managerRef = result;
                    history.managers.set(extractRefId(managerRef), { ...payload, manager: result, eyes: [] });
                }
                else if (name.startsWith('EyesManager.')) {
                    const managerRef = payload.manager;
                    const managerHistory = history.managers.get(extractRefId(managerRef));
                    if (managerHistory) {
                        if (name === 'EyesManager.openEyes') {
                            if (error) {
                                managerHistory.eyes.push({ ...payload, error });
                            }
                            else {
                                const eyesRef = result;
                                managerHistory.eyes.push(eyesRef);
                                history.eyes.set(extractRefId(eyesRef), { ...payload, eyes: eyesRef, commands: [] });
                            }
                        }
                    }
                }
                else if (name.startsWith('Eyes.')) {
                    const eyesRef = payload.eyes;
                    const eyesHistory = history.eyes.get(extractRefId(eyesRef));
                    if (eyesHistory) {
                        if (name === 'Eyes.check') {
                            const command = { name, ...payload };
                            if (error)
                                command.error = error;
                            else
                                command.result = result;
                            eyesHistory.commands.push(command);
                        }
                        else if (name === 'Eyes.close') {
                            eyesHistory.closed = true;
                        }
                        else if (name === 'Eyes.abort') {
                            eyesHistory.aborted = true;
                        }
                        else if (name === 'Eyes.getResults') {
                            eyesHistory.result = error !== null && error !== void 0 ? error : result;
                        }
                    }
                }
            }
        });
    };
    return function getHistory() {
        return {
            managers: Array.from(history.managers.values(), managerMeta => ({
                ...managerMeta,
                eyes: managerMeta.eyes.map(eyesRefOrError => {
                    return eyesRefOrError instanceof Error ? eyesRefOrError : history.eyes.get(extractRefId(eyesRefOrError));
                }),
            })),
            startedAt: history.startedAt,
            requestedAt: new Date().toISOString(),
        };
    };
    function extractRefId(ref) {
        return ref['applitools-ref-id'];
    }
}
exports.withHistory = withHistory;
