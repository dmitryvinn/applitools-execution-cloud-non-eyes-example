"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOpenEyes = void 0;
const driver_1 = require("@applitools/driver");
const get_base_eyes_1 = require("./get-base-eyes");
const check_1 = require("./check");
const check_and_close_1 = require("./check-and-close");
const close_1 = require("./close");
const abort_1 = require("./abort");
const get_results_1 = require("./get-results");
const abort_controller_1 = require("abort-controller");
const utils = __importStar(require("@applitools/utils"));
function makeOpenEyes({ core, spec, logger: mainLogger }) {
    return async function openEyes({ target, settings, base, logger = mainLogger, }) {
        var _a, _b;
        logger = logger.extend(mainLogger);
        logger.log(`Command "openEyes" is called with ${target ? 'default driver and' : ''}`, ...(settings ? ['settings', settings] : []), base ? 'predefined eyes' : '');
        const driver = target && (await (0, driver_1.makeDriver)({ spec, driver: target, logger }));
        if (driver && !base) {
            const environment = await (driver === null || driver === void 0 ? void 0 : driver.getEnvironment());
            const currentContext = driver.currentContext;
            (_a = settings.environment) !== null && _a !== void 0 ? _a : (settings.environment = {});
            if (environment.isEC) {
                settings.environment.ecSessionId = (_b = (await driver.getSessionId())) !== null && _b !== void 0 ? _b : undefined;
            }
            if (settings.environment.viewportSize) {
                await driver.setViewportSize(settings.environment.viewportSize);
            }
            await currentContext.focus();
        }
        const controller = new abort_controller_1.AbortController();
        const account = await core.getAccountInfo({ settings, logger });
        return utils.general.extend({}, eyes => {
            var _a;
            const storage = new Map();
            let running = true;
            return {
                type: 'ufg',
                core,
                test: {
                    userTestId: settings.userTestId,
                    batchId: (_a = settings.batch) === null || _a === void 0 ? void 0 : _a.id,
                    keepBatchOpen: settings.keepBatchOpen,
                    server: account.server,
                    ufgServer: account.ufgServer,
                    account,
                },
                get running() {
                    return running;
                },
                getBaseEyes: (0, get_base_eyes_1.makeGetBaseEyes)({ settings, eyes, base, logger }),
                // check with indexing and storage
                check: utils.general.wrap((0, check_1.makeCheck)({ eyes, target: driver, spec, signal: controller.signal, logger }), async (check, options = {}) => {
                    const results = await check(options);
                    results.forEach(result => {
                        var _a;
                        const key = JSON.stringify(result.renderer);
                        storage.set(key, [...((_a = storage.get(key)) !== null && _a !== void 0 ? _a : []), result.promise]);
                    });
                    return results;
                }),
                checkAndClose: utils.general.wrap((0, check_and_close_1.makeCheckAndClose)({ eyes, target: driver, spec, signal: controller.signal, logger }), async (checkAndClose, options = {}) => {
                    const results = await checkAndClose(options);
                    results.forEach(result => {
                        var _a;
                        const key = JSON.stringify(result.renderer);
                        storage.set(key, [...((_a = storage.get(key)) !== null && _a !== void 0 ? _a : []), { eyes: result.eyes, renderer: result.renderer }]);
                    });
                    return results;
                }),
                close: utils.general.wrap((0, close_1.makeClose)({ storage, target: driver, logger }), async (close, options) => {
                    if (!running)
                        return;
                    running = false;
                    return close(options);
                }),
                abort: utils.general.wrap((0, abort_1.makeAbort)({ storage, target: driver, spec, controller, logger }), async (abort, options) => {
                    if (!running)
                        return;
                    running = false;
                    return abort(options);
                }),
                getResults: (0, get_results_1.makeGetResults)({ storage, logger }),
            };
        });
    };
}
exports.makeOpenEyes = makeOpenEyes;
