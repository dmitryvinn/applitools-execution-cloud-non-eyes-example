"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetUFGClient = void 0;
const ufg_client_1 = require("@applitools/ufg-client");
const utils = __importStar(require("@applitools/utils"));
function makeGetUFGClient({ client, fetchConcurrency, logger: mainLogger }) {
    // we are caching by the server config, therefor if the user creates another Runner / manager with the same server config but different
    // fetchConcurrency, it will not take any affect.
    const getUFGClientWithCache = utils.general.cachify(getUFGClient, ([options]) => client ? 'default' : [{ ...options.config, fetchConcurrency: undefined }]);
    if (client)
        getUFGClientWithCache.setCachedValue('default', Promise.resolve(client));
    return getUFGClientWithCache;
    async function getUFGClient({ config, logger = mainLogger }) {
        logger = logger.extend(mainLogger);
        return (0, ufg_client_1.makeUFGClient)({ config: { ...config, fetchConcurrency }, logger });
    }
}
exports.makeGetUFGClient = makeGetUFGClient;
