"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetResults = void 0;
const abort_error_1 = require("../errors/abort-error");
function makeGetResults({ storage, logger: mainLogger }) {
    return async function getResults({ settings, logger = mainLogger, } = {}) {
        logger = logger.extend(mainLogger);
        logger.log('Command "getResults" is called with settings', settings);
        return Promise.all(Array.from(storage.values(), async (promises) => {
            var _a;
            try {
                const [{ eyes, renderer }] = await Promise.all(promises);
                const [result] = await eyes.getResults({ settings, logger });
                return { ...result, renderer };
            }
            catch (error) {
                if (error instanceof abort_error_1.AbortError && ((_a = error.info) === null || _a === void 0 ? void 0 : _a.eyes)) {
                    logger.warn('Command "getResults" received an abort error during performing', settings);
                    const [result] = await error.info.eyes.getResults({ settings, logger });
                    return { ...result, renderer: error.info.renderer };
                }
                logger.fatal('Command "getResults" received an error during performing', settings);
                throw error;
            }
        }));
    };
}
exports.makeGetResults = makeGetResults;
