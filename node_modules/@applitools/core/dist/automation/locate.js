"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLocate = void 0;
const driver_1 = require("@applitools/driver");
const take_screenshot_1 = require("./utils/take-screenshot");
const utils = __importStar(require("@applitools/utils"));
function makeLocate({ spec, core, logger: mainLogger }) {
    return async function locate({ settings, target, logger = mainLogger, }) {
        logger = logger.extend(mainLogger);
        logger.log(`Command "locate" is called with settings`, settings);
        if (!(0, driver_1.isDriver)(target, spec)) {
            return core.base.locate({ target, settings: settings, logger });
        }
        const driver = await (0, driver_1.makeDriver)({ driver: target, spec, logger });
        const screenshot = await (0, take_screenshot_1.takeScreenshot)({ driver, settings, logger });
        const baseTarget = { image: await screenshot.image.toPng() };
        const results = await core.base.locate({
            target: baseTarget,
            settings: settings,
            logger,
        });
        const environment = await driver.getEnvironment();
        const viewport = await driver.getViewport();
        return Object.entries(results).reduce((results, [key, regions]) => {
            results[key] = regions.map(region => {
                var _a;
                region = utils.geometry.offset(region, (_a = viewport.viewportLocation) !== null && _a !== void 0 ? _a : { x: 0, y: 0 });
                region = utils.geometry.scale(region, 1 / viewport.viewportScale);
                if (environment.isNative && environment.isAndroid)
                    region = utils.geometry.scale(region, viewport.pixelRatio);
                return region;
            });
            return results;
        }, {});
    };
}
exports.makeLocate = makeLocate;
