import { type Logger } from '@applitools/logger';
import { type SpecType, type Context } from '@applitools/driver';
import { type DomSnapshot } from '@applitools/ufg-client';
type RawDomSnapshot = {
    url: string;
    selector: string;
    cdt: {
        attributes: {
            name: string;
            value: string;
        }[];
    }[];
    crossFrames: {
        selector: string;
        index: number;
    }[];
    frames: RawDomSnapshot[];
    resourceUrls: string[];
    blobs: {
        url: string;
        value: string;
    }[];
};
export type DomSnapshotSettings = {
    disableBrowserFetching?: boolean;
    skipResources?: string[];
    chunkByteLength?: number;
    executionTimeout?: number;
    pollTimeout?: number;
    showLogs?: boolean;
};
export declare function takeDomSnapshot<TSpec extends SpecType>({ context, settings, logger, }: {
    context: Context<TSpec>;
    settings?: DomSnapshotSettings;
    logger: Logger;
}): Promise<DomSnapshot>;
export declare function deserializeDomSnapshot({ snapshot }: {
    snapshot: RawDomSnapshot;
}): DomSnapshot;
export declare function extractCrossFrames({ snapshot, parent, logger, }: {
    snapshot: RawDomSnapshot;
    parent?: any;
    logger: Logger;
}): {
    cdtNode: RawDomSnapshot['cdt'][number];
    reference: any;
    parentSnapshot: RawDomSnapshot;
}[];
export {};
