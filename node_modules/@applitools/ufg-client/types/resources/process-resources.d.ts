import type { Renderer } from '../types';
import { type UrlResource, type ContentfulResource, type HashedResource, type KnownResource, type FailedResource } from './resource';
import { type Logger } from '@applitools/logger';
import { type FetchResource, type FetchResourceSettings } from './fetch-resource';
import { type UploadResource } from './upload-resource';
type Options = {
    fetchResource: FetchResource;
    uploadResource: UploadResource;
    cache?: Map<string, KnownResource & {
        ready: boolean | Promise<boolean>;
    }>;
    logger: Logger;
};
export type ProcessResources = (options: {
    resources: Record<string, FailedResource | ContentfulResource | UrlResource>;
    settings?: ProcessResourcesSettings;
    logger?: Logger;
}) => Promise<{
    mapping: ResourceMapping;
    promise: Promise<ResourceMapping>;
}>;
export type ProcessResourcesSettings = FetchResourceSettings & {
    renderer?: Renderer;
};
export type ResourceMapping = Record<string, HashedResource | {
    errorStatusCode: number;
}>;
export declare function makeProcessResources({ fetchResource, uploadResource, cache, logger: mainLogger, }: Options): ProcessResources;
export {};
