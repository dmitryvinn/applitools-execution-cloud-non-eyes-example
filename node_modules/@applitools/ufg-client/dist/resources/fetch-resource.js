"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeFetchResource = void 0;
const req_1 = require("@applitools/req");
const resource_1 = require("./resource");
const abort_controller_1 = require("abort-controller");
const create_cookie_header_1 = require("../utils/create-cookie-header");
const create_user_agent_header_1 = require("../utils/create-user-agent-header");
const throat_1 = __importDefault(require("throat"));
const utils = __importStar(require("@applitools/utils"));
function makeFetchResource({ retryLimit = 5, streamingTimeout = 30 * 1000, fetchTimeout = 30 * 1000, fetchConcurrency, cache = new Map(), fetch, logger: mainLogger, }) {
    const req = (0, req_1.makeReq)({
        retry: {
            limit: retryLimit,
            validate: ({ error }) => Boolean(error),
        },
        fetch,
    });
    return fetchConcurrency ? (0, throat_1.default)(fetchConcurrency, fetchResource) : fetchResource;
    async function fetchResource({ resource, settings = {}, logger = mainLogger, }) {
        var _a;
        logger = logger.extend(mainLogger, { tags: [`fetch-resource-${utils.general.shortid()}`] });
        let runningRequest = cache.get(resource.id);
        if (runningRequest)
            return runningRequest;
        runningRequest = req(resource.url, {
            headers: {
                Referer: settings.referer,
                Cookie: settings.cookies && (0, create_cookie_header_1.createCookieHeader)({ url: resource.url, cookies: settings.cookies }),
                'User-Agent': (_a = (resource.renderer && (0, create_user_agent_header_1.createUserAgentHeader)({ renderer: resource.renderer }))) !== null && _a !== void 0 ? _a : settings.userAgent,
            },
            proxy: resourceUrl => {
                const { proxy, autProxy } = settings;
                if (autProxy) {
                    if (!autProxy.domains)
                        return autProxy;
                    const domainMatch = autProxy.domains.includes(resourceUrl.hostname);
                    if ((autProxy.mode === 'Allow' && domainMatch) || (autProxy.mode === 'Block' && !domainMatch))
                        return autProxy;
                }
                return proxy;
            },
            hooks: [handleLogs({ logger }), handleStreaming({ timeout: streamingTimeout, logger })],
            timeout: fetchTimeout,
        })
            .then(async (response) => {
            return response.ok
                ? (0, resource_1.makeResource)({
                    ...resource,
                    value: Buffer.from(await response.arrayBuffer()),
                    contentType: response.headers.get('Content-Type'),
                })
                : (0, resource_1.makeResource)({ ...resource, errorStatusCode: response.status });
        })
            .finally(() => cache.delete(resource.id));
        cache.set(resource.id, runningRequest);
        return runningRequest;
    }
}
exports.makeFetchResource = makeFetchResource;
function handleLogs({ logger }) {
    return {
        beforeRequest({ request }) {
            logger === null || logger === void 0 ? void 0 : logger.log(`Resource with url ${request.url} will be fetched using headers`, Object.fromEntries(request.headers.entries()));
        },
        beforeRetry({ request, attempt }) {
            logger === null || logger === void 0 ? void 0 : logger.log(`Resource with url ${request.url} will be re-fetched (attempt ${attempt})`);
        },
        afterResponse({ request, response }) {
            logger === null || logger === void 0 ? void 0 : logger.log(`Resource with url ${request.url} respond with ${response.statusText}(${response.statusText})`);
        },
        afterError({ request, error }) {
            logger === null || logger === void 0 ? void 0 : logger.error(`Resource with url ${request.url} failed with error`, error);
        },
    };
}
function handleStreaming({ timeout, logger }) {
    const controller = new abort_controller_1.AbortController();
    return {
        async beforeRequest({ request }) {
            var _a, _b;
            if ((_a = request.signal) === null || _a === void 0 ? void 0 : _a.aborted)
                return;
            (_b = request.signal) === null || _b === void 0 ? void 0 : _b.addEventListener('abort', () => controller.abort());
            return { request, signal: controller.signal };
        },
        async afterResponse({ response }) {
            const contentLength = response.headers.get('Content-Length');
            const contentType = response.headers.get('Content-Type');
            const isProbablyStreaming = response.ok && !contentLength && contentType && /^(audio|video)\//.test(contentType);
            if (!isProbablyStreaming)
                return;
            return new Promise(resolve => {
                const timer = setTimeout(() => {
                    controller.abort();
                    resolve({ status: 599 });
                    logger === null || logger === void 0 ? void 0 : logger.log(`Resource with url ${response.url} was interrupted, due to it takes too long to download`);
                }, timeout);
                response
                    .arrayBuffer()
                    .then(body => resolve({ response, body: Buffer.from(body) }))
                    .catch(() => resolve({ status: 599 }))
                    .finally(() => clearTimeout(timer));
            });
        },
    };
}
