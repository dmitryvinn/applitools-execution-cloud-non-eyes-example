"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCreateRenderTarget = void 0;
const resource_1 = require("./resources/resource");
const resource_dom_1 = require("./resources/resource-dom");
const resource_vhs_1 = require("./resources/resource-vhs");
const utils = __importStar(require("@applitools/utils"));
function makeCreateRenderTarget({ processResources, logger: mainLogger }) {
    return async function createRenderTarget({ snapshot, settings, logger = mainLogger, }) {
        logger = logger.extend(mainLogger, { tags: [`render-target-${utils.general.shortid()}`] });
        const processedSnapshotResources = await processSnapshotResources({ snapshot, settings, logger });
        const resources = await processedSnapshotResources.promise;
        const isWeb = !!snapshot.cdt;
        const hashedSnapshot = resources[isWeb ? snapshot.url : 'vhs'];
        if (isWeb) {
            delete resources[snapshot.url];
        }
        return {
            snapshot: hashedSnapshot,
            resources,
            source: snapshot.url,
            vhsType: snapshot.vhsType,
            vhsCompatibilityParams: snapshot.vhsCompatibilityParams,
        };
    };
    async function processSnapshotResources({ snapshot, settings, logger, }) {
        var _a;
        const [snapshotResources, ...frameResources] = await Promise.all([
            processResources({
                resources: {
                    ...(utils.types.has(snapshot, 'resourceUrls') ? snapshot.resourceUrls : []).reduce((resources, url) => {
                        return Object.assign(resources, { [url]: (0, resource_1.makeResource)({ url, renderer: settings === null || settings === void 0 ? void 0 : settings.renderer }) });
                    }, {}),
                    ...Object.entries(utils.types.has(snapshot, 'resourceContents') ? snapshot.resourceContents : {}).reduce((resources, [url, resource]) => {
                        return Object.assign(resources, {
                            [url]: utils.types.has(resource, 'errorStatusCode')
                                ? (0, resource_1.makeResource)({ id: url, errorStatusCode: resource.errorStatusCode })
                                : (0, resource_1.makeResource)({
                                    url,
                                    value: resource.value,
                                    contentType: resource.type,
                                    dependencies: resource.dependencies,
                                }),
                        });
                    }, {}),
                },
                settings: { referer: utils.types.has(snapshot, 'url') ? snapshot.url : undefined, ...settings },
                logger,
            }),
            ...(utils.types.has(snapshot, 'frames') ? (_a = snapshot.frames) !== null && _a !== void 0 ? _a : [] : []).map(frameSnapshot => {
                return processSnapshotResources({ snapshot: frameSnapshot, settings, logger });
            }),
        ]);
        const frameDomResourceMapping = frameResources.reduce((mapping, resources, index) => {
            const frameUrl = snapshot.frames[index].url;
            return Object.assign(mapping, { [frameUrl]: resources.mapping[frameUrl] });
        }, {});
        const resourceMappingWithoutDom = { ...snapshotResources.mapping, ...frameDomResourceMapping };
        const domResource = utils.types.has(snapshot, 'cdt')
            ? {
                [snapshot.url]: (0, resource_dom_1.makeResourceDom)({
                    cdt: snapshot.cdt,
                    resources: resourceMappingWithoutDom,
                }),
            }
            : {
                vhs: (0, resource_vhs_1.makeResourceVhs)({
                    vhsHash: utils.types.has(snapshot, 'vhsHash')
                        ? snapshot.vhsHash /* android */
                        : snapshotResources.mapping.vhs /* ios */,
                    vhsType: utils.types.has(snapshot, 'vhsType') ? snapshot.vhsHash : undefined,
                    platformName: snapshot.platformName,
                    resources: resourceMappingWithoutDom, // this will be empty until resources are supported inside VHS
                }),
            };
        const processedDomResource = await processResources({ resources: domResource, logger });
        const frameResourceMapping = frameResources.reduce((mapping, resources) => {
            return Object.assign(mapping, resources.mapping);
        }, {});
        const resourceMapping = {
            ...frameResourceMapping,
            ...snapshotResources.mapping,
            ...processedDomResource.mapping,
        };
        return {
            mapping: resourceMapping,
            promise: Promise.all([
                snapshotResources.promise,
                processedDomResource.promise,
                ...frameResources.map(resources => resources.promise),
            ]).then(() => resourceMapping),
        };
    }
}
exports.makeCreateRenderTarget = makeCreateRenderTarget;
