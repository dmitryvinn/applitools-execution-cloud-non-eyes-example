"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractSvgDependencyUrls = void 0;
const jsdom_1 = require("jsdom");
const extract_css_dependency_urls_1 = require("./extract-css-dependency-urls");
const utils = __importStar(require("@applitools/utils"));
function extractSvgDependencyUrls(svg, { resourceUrl, pageUrl }) {
    const urls = new Set();
    const doc = typeof DOMParser === 'function'
        ? new DOMParser().parseFromString(svg, 'image/svg+xml')
        : new jsdom_1.JSDOM(svg).window.document;
    Array.from(doc.querySelectorAll('img[srcset]')).forEach(element => {
        const sources = element.getAttribute('srcset').split(', ');
        sources.forEach(source => urls.add(sanitizeUrl(source.trim().split(/\s+/, 1)[0], { baseUrl: resourceUrl })));
    });
    Array.from(doc.querySelectorAll('img[src]')).forEach(element => {
        urls.add(sanitizeUrl(element.getAttribute('src'), { baseUrl: resourceUrl }));
    });
    Array.from(doc.querySelectorAll('image,use,link[rel="stylesheet"]')).forEach(element => {
        urls.add(sanitizeUrl(element.getAttribute('href') || element.getAttribute('xlink:href'), { baseUrl: resourceUrl }));
    });
    Array.from(doc.getElementsByTagName('object')).forEach(element => {
        urls.add(sanitizeUrl(element.getAttribute('data'), { baseUrl: resourceUrl }));
    });
    Array.from(doc.querySelectorAll('style')).forEach(element => {
        const cssUrls = element.textContent ? (0, extract_css_dependency_urls_1.extractCssDependencyUrls)(element.textContent, { resourceUrl, pageUrl }) : [];
        cssUrls.forEach(url => urls.add(url));
    });
    Array.from(doc.querySelectorAll('*[style]')).forEach(element => {
        const matches = element.style.cssText.matchAll(/url\((?!['"]?:)['"]?([^'")]*)['"]?\)/g);
        Array.from(matches).forEach(([, url]) => urls.add(sanitizeUrl(url, { baseUrl: resourceUrl })));
    });
    return [...urls];
}
exports.extractSvgDependencyUrls = extractSvgDependencyUrls;
function sanitizeUrl(url, { baseUrl }) {
    if (url.startsWith('#'))
        return baseUrl;
    return utils.general.absolutizeUrl(utils.general.toUnAnchoredUri(url), baseUrl);
}
