"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUFGClient = exports.defaultResourceCache = void 0;
const logger_1 = require("@applitools/logger");
const requests_1 = require("./server/requests");
const create_render_target_1 = require("./create-render-target");
const book_renderer_1 = require("./book-renderer");
const render_1 = require("./render");
const process_resources_1 = require("./resources/process-resources");
const fetch_resource_1 = require("./resources/fetch-resource");
const upload_resource_1 = require("./resources/upload-resource");
exports.defaultResourceCache = new Map();
function makeUFGClient({ config, cache = exports.defaultResourceCache, logger, }) {
    logger = (0, logger_1.makeLogger)({ logger, format: { label: 'ufg-client' } });
    const requests = (0, requests_1.makeUFGRequests)({ config, logger });
    const fetchResource = (0, fetch_resource_1.makeFetchResource)({ fetchConcurrency: config.fetchConcurrency, logger });
    const uploadResource = (0, upload_resource_1.makeUploadResource)({ requests, logger });
    const processResources = (0, process_resources_1.makeProcessResources)({ fetchResource, uploadResource, cache, logger });
    return {
        createRenderTarget: (0, create_render_target_1.makeCreateRenderTarget)({ processResources, logger }),
        bookRenderer: (0, book_renderer_1.makeBookRenderer)({ requests, logger }),
        render: (0, render_1.makeRender)({ requests, logger }),
        getChromeEmulationDevices: requests.getChromeEmulationDevices,
        getAndroidDevices: requests.getAndroidDevices,
        getIOSDevices: requests.getIOSDevices,
        getCachedResourceUrls: () => Array.from(cache.keys()),
    };
}
exports.makeUFGClient = makeUFGClient;
