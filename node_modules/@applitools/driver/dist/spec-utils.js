"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withFastCache = exports.splitSelector = exports.transformSelector = void 0;
const selector_1 = require("./selector");
function transformSelector(spec, selector, environment) {
    var _a, _b;
    if ((environment === null || environment === void 0 ? void 0 : environment.isWeb) && (0, selector_1.isObjectCommonSelector)(selector, spec)) {
        if (selector.type === 'id')
            selector = { type: 'css', selector: `#${selector.selector}` };
        else if (selector.type === 'name')
            selector = { type: 'css', selector: `[name="${selector.selector}"]` };
        else if (selector.type === 'class name')
            selector = { type: 'css', selector: `.${selector.selector}` };
        else if (selector.type === 'tag name')
            selector = { type: 'css', selector: `${selector.selector}` };
    }
    selector;
    return (_b = (_a = spec.transformSelector) === null || _a === void 0 ? void 0 : _a.call(spec, selector)) !== null && _b !== void 0 ? _b : selector;
}
exports.transformSelector = transformSelector;
function splitSelector(spec, selector) {
    let targetSelector = selector;
    let activeSelector = {};
    let elementSelector = activeSelector;
    const contextSelectors = [];
    while (targetSelector) {
        if ((0, selector_1.isObjectCommonSelector)(targetSelector, spec)) {
            activeSelector.selector = targetSelector.selector;
            if (targetSelector.type)
                activeSelector.type = targetSelector.type;
            if (targetSelector.child) {
                activeSelector = activeSelector.child = {};
                targetSelector = targetSelector.child;
            }
            else if (targetSelector.shadow) {
                activeSelector = activeSelector.shadow = {};
                targetSelector = targetSelector.shadow;
            }
            else if (targetSelector.frame) {
                contextSelectors.push(elementSelector);
                elementSelector = activeSelector = {};
                targetSelector = targetSelector.frame;
            }
            else {
                targetSelector = null;
            }
        }
        else {
            activeSelector.selector = targetSelector;
            targetSelector = null;
        }
    }
    return { contextSelectors, elementSelector };
}
exports.splitSelector = splitSelector;
function withFastCache(spec) {
    const cache = new Map();
    return Object.entries(spec).reduce((spec, [name, command]) => {
        spec[name] = (...args) => {
            const value = cache.get(command);
            if ((value === null || value === void 0 ? void 0 : value.args.length) === args.length && value.args.every((arg, index) => arg === args[index])) {
                return value.result;
            }
            else {
                cache.delete(command);
            }
            const result = command(...args);
            if (!(result instanceof Promise))
                return result;
            cache.set(command, { args, result });
            return result.finally(() => setImmediate(() => cache.delete(command)));
        };
        return spec;
    }, {});
}
exports.withFastCache = withFastCache;
