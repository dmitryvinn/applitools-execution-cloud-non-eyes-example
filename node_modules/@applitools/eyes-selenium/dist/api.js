"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.closeBatch = exports.BatchClose = exports.Configuration = exports.Target = exports.TargetAutomation = exports.CheckSettings = exports.CheckSettingsAutomation = exports.Eyes = void 0;
const eyes = __importStar(require("@applitools/eyes"));
const spec = __importStar(require("@applitools/spec-driver-selenium"));
__exportStar(require("@applitools/eyes"), exports);
const sdk = { agentId: `eyes.selenium/${require('../package.json').version}`, spec };
class Eyes extends eyes.Eyes {
}
exports.Eyes = Eyes;
Eyes._sdk = sdk;
class CheckSettingsAutomation extends eyes.CheckSettingsAutomation {
}
exports.CheckSettingsAutomation = CheckSettingsAutomation;
CheckSettingsAutomation._spec = spec;
class CheckSettings extends CheckSettingsAutomation {
}
exports.CheckSettings = CheckSettings;
exports.TargetAutomation = { ...eyes.TargetAutomation, spec };
exports.Target = { ...eyes.Target, spec };
class Configuration extends eyes.Configuration {
}
exports.Configuration = Configuration;
Configuration._spec = spec;
class BatchClose extends eyes.BatchClose {
}
exports.BatchClose = BatchClose;
BatchClose._sdk = sdk;
exports.closeBatch = eyes.closeBatch(sdk);
