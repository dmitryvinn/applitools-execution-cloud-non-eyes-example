const fs = require('fs')
const https = require('https')
const crypto = require('crypto')
const {getExpectedBinHash, getBinHash, frpcVersion} = require('@applitools/eg-frpc')

const {FrpcDownloadError} = require('../src/utils')

module.exports = {
  downloadFrpc,
  getFrpcDownloadLink,
  getManualFrpcInstallingErrorMessage,
  getFrpcErrorMessage,
}

async function downloadFrpc({platform, arch, cacheDirectoryPath, frpcPath, shouldUpdate}) {
  const expectedHash = getExpectedBinHash({platform, arch})
  const url = getFrpcDownloadLink({platform, arch})

  try {
    await _downloadBin({filename: frpcPath, url})
    const actualHash = await getBinHash(frpcPath)

    if (actualHash !== expectedHash)
      throw new Error(`Checksum failed: expected: ${expectedHash} actual: ${actualHash}`)
  } catch (e) {
    console.log(e.message)
    fs.unlinkSync(frpcPath)

    throw new FrpcDownloadError(
      url,
      cacheDirectoryPath,
      frpcPath,
      getFrpcErrorMessage({url, cacheDirectoryPath, shouldUpdate}),
    )
  }

  await fs.promises.chmod(frpcPath, 0o777)
}

function getFrpcDownloadLink({platform, arch}) {
  return `https://exec-wus.applitools.com/frpc/${frpcVersion}/${platform}/${arch}`
}

function getFrpcErrorMessage({url, cacheDirectoryPath, shouldUpdate}) {
  const prefix = shouldUpdate
    ? `Execution Cloud reverse proxy update failed.`
    : `Execution Cloud reverse proxy installation failed.`
  return `${prefix} Please download the binary from ${url} and put it in ${cacheDirectoryPath}.`
}

function getManualFrpcInstallingErrorMessage({
  platform,
  arch,
  shouldUpdate,
  cacheDirectoryPath,
  _frpcPath,
}) {
  const prefix = shouldUpdate
    ? `Please update the Execution Cloud reverse proxy binary.`
    : `Please Download Execution Cloud reverse proxy binary and put it in ${cacheDirectoryPath}.`

  return `${prefix}. You can download the file from ${getFrpcDownloadLink({platform, arch})}`
}

const _downloadBin = function ({filename, url}) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filename)

    https
      .get(url, function (response) {
        response.pipe(file)
        file.on('finish', function () {
          file.close((err) => {
            if (!err) resolve()
            else reject(err)
          })
        })
      })
      .on('error', function (err) {
        fs.unlinkSync(filename)
        reject(err)
      })
  })
}
