import type * as Core from '@applitools/core';
import { TestResultsStatus, TestResultsStatusEnum } from '../enums/TestResultsStatus';
import { ProxySettings } from '../input/ProxySettings';
import { RectangleSize, RectangleSizeData } from '../input/RectangleSize';
import { TestAccessibilityStatus } from './TestAccessibilityStatus';
import { SessionUrls, SessionUrlsData } from './SessionUrls';
import { StepInfo, StepInfoData } from './StepInfo';
export type TestResults = {
    readonly id?: string;
    readonly name?: string;
    readonly secretToken?: string;
    readonly status?: TestResultsStatus;
    readonly appName?: string;
    readonly batchId?: string;
    readonly batchName?: string;
    readonly branchName?: string;
    readonly hostOS?: string;
    readonly hostApp?: string;
    readonly hostDisplaySize?: RectangleSize;
    readonly accessibilityStatus?: TestAccessibilityStatus;
    readonly startedAt?: string;
    readonly duration?: number;
    readonly isNew?: boolean;
    readonly isDifferent?: boolean;
    readonly isAborted?: boolean;
    readonly appUrls?: SessionUrls;
    readonly apiUrls?: SessionUrls;
    readonly stepsInfo?: StepInfo[];
    readonly steps?: number;
    readonly matches?: number;
    readonly mismatches?: number;
    readonly missing?: number;
    readonly exactMatches?: number;
    readonly strictMatches?: number;
    readonly contentMatches?: number;
    readonly layoutMatches?: number;
    readonly noneMatches?: number;
    readonly url?: string;
    readonly server?: {
        serverUrl: string;
        apiKey: string;
        proxy?: ProxySettings;
    };
    readonly keepIfDuplicate?: boolean;
};
export declare class TestResultsData implements Required<TestResults> {
    private _core?;
    private _result;
    /** @internal */
    constructor(options: {
        result?: Partial<Core.TestResult<'classic' | 'ufg'>>;
        core?: Core.Core<Core.SpecType, 'classic' | 'ufg'>;
    });
    get id(): string;
    getId(): string;
    /** @deprecated */
    setId(_id: string): void;
    get name(): string;
    getName(): string;
    /** @deprecated */
    setName(_name: string): void;
    get secretToken(): string;
    getSecretToken(): string;
    /** @deprecated */
    setSecretToken(_secretToken: string): void;
    get status(): TestResultsStatus;
    getStatus(): TestResultsStatusEnum;
    /** @deprecated */
    setStatus(_status: TestResultsStatusEnum): void;
    get appName(): string;
    getAppName(): string;
    /** @deprecated */
    setAppName(_appName: string): void;
    get batchName(): string;
    getBatchName(): string;
    /** @deprecated */
    setBatchName(_batchName: string): void;
    get batchId(): string;
    getBatchId(): string;
    /** @deprecated */
    setBatchId(_batchId: string): void;
    get branchName(): string;
    getBranchName(): string;
    /** @deprecated */
    setBranchName(_branchName: string): void;
    get hostOS(): string;
    getHostOS(): string;
    /** @deprecated */
    setHostOS(_hostOS: string): void;
    get hostApp(): string;
    getHostApp(): string;
    /** @deprecated */
    setHostApp(_hostApp: string): void;
    get hostDisplaySize(): RectangleSize;
    getHostDisplaySize(): RectangleSizeData;
    /** @deprecated */
    setHostDisplaySize(_hostDisplaySize: RectangleSize): void;
    get accessibilityStatus(): TestAccessibilityStatus;
    getAccessibilityStatus(): TestAccessibilityStatus;
    /** @deprecated */
    setAccessibilityStatus(_accessibilityStatus: TestAccessibilityStatus): void;
    get startedAt(): string;
    getStartedAt(): Date;
    /** @deprecated */
    setStartedAt(_startedAt: Date | string): void;
    get duration(): number;
    getDuration(): number;
    /** @deprecated */
    setDuration(_duration: number): void;
    get isNew(): boolean;
    getIsNew(): boolean;
    /** @deprecated */
    setIsNew(_isNew: boolean): void;
    get isDifferent(): boolean;
    getIsDifferent(): boolean;
    /** @deprecated */
    setIsDifferent(_isDifferent: boolean): void;
    get isAborted(): boolean;
    getIsAborted(): boolean;
    /** @deprecated */
    setIsAborted(_isAborted: boolean): void;
    get appUrls(): SessionUrls;
    getAppUrls(): SessionUrlsData;
    /** @deprecated */
    setAppUrls(_appUrls: SessionUrls): void;
    get apiUrls(): SessionUrls;
    getApiUrls(): SessionUrlsData;
    /** @deprecated */
    setApiUrls(_apiUrls: SessionUrls): void;
    get stepsInfo(): StepInfo[];
    getStepsInfo(): StepInfoData[];
    /** @deprecated */
    setStepsInfo(_stepInfo: StepInfo[]): void;
    get steps(): number;
    getSteps(): number;
    /** @deprecated */
    setSteps(_steps: number): void;
    get matches(): number;
    getMatches(): number;
    /** @deprecated */
    setMatches(_matches: number): void;
    get mismatches(): number;
    getMismatches(): number;
    /** @deprecated */
    setMismatches(_mismatches: number): void;
    get missing(): number;
    getMissing(): number;
    /** @deprecated */
    setMissing(_missing: number): void;
    get exactMatches(): number;
    getExactMatches(): number;
    /** @deprecated */
    setExactMatches(_exactMatches: number): void;
    get strictMatches(): number;
    getStrictMatches(): number;
    /** @deprecated */
    setStrictMatches(_strictMatches: number): void;
    get contentMatches(): number;
    getContentMatches(): number;
    /** @deprecated */
    setContentMatches(_contentMatches: number): void;
    get layoutMatches(): number;
    getLayoutMatches(): number;
    /** @deprecated */
    setLayoutMatches(_layoutMatches: number): void;
    get noneMatches(): number;
    getNoneMatches(): number;
    /** @deprecated */
    setNoneMatches(_noneMatches: number): void;
    get url(): string;
    getUrl(): string;
    /** @deprecated */
    setUrl(_url: string): void;
    get server(): Core.ServerSettings;
    get keepIfDuplicate(): boolean;
    isPassed(): boolean;
    delete(): Promise<void>;
    /** @deprecated */
    deleteSession(): Promise<void>;
    /** @internal */
    toObject(): TestResults;
    /** @internal */
    toJSON(): Core.TestResult<'classic' | 'ufg'>;
    /** @internal */
    toString(): string;
}
