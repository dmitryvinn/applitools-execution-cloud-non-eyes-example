import { Region, RegionData } from './Region';
/** @undocumented */
export type FloatingMatchSettings = {
    region: Region;
    maxUpOffset?: number;
    maxDownOffset?: number;
    maxLeftOffset?: number;
    maxRightOffset?: number;
};
/** @undocumented */
export declare class FloatingMatchSettingsData implements Required<FloatingMatchSettings> {
    private _settings;
    constructor(settings: FloatingMatchSettings);
    constructor(region: Region);
    constructor(x: number, y: number, width: number, height: number, maxUpOffset?: number, maxDownOffset?: number, maxLeftOffset?: number, maxRightOffset?: number);
    get region(): Region;
    set region(region: Region);
    getRegion(): RegionData;
    setRegion(region: Region): void;
    getLeft(): number;
    setLeft(left: number): void;
    getTop(): number;
    setTop(top: number): void;
    getWidth(): number;
    setWidth(width: number): void;
    getHeight(): number;
    setHeight(height: number): void;
    get maxUpOffset(): number;
    set maxUpOffset(maxUpOffset: number);
    getMaxUpOffset(): number;
    setMaxUpOffset(maxUpOffset: number): void;
    get maxDownOffset(): number;
    set maxDownOffset(maxDownOffset: number);
    getMaxDownOffset(): number;
    setMaxDownOffset(maxDownOffset: number): void;
    get maxLeftOffset(): number;
    set maxLeftOffset(maxLeftOffset: number);
    getMaxLeftOffset(): number;
    setMaxLeftOffset(maxLeftOffset: number): void;
    get maxRightOffset(): number;
    set maxRightOffset(maxRightOffset: number);
    getMaxRightOffset(): number;
    setMaxRightOffset(maxRightOffset: number): void;
    /** @internal */
    toObject(): FloatingMatchSettings;
    /** @internal */
    toJSON(): FloatingMatchSettings;
    /** @internal */
    toString(): string;
}
