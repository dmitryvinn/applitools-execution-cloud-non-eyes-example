"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxySettingsData = void 0;
const utils = __importStar(require("@applitools/utils"));
class ProxySettingsData {
    constructor(proxyOrUrl, username, password) {
        this._proxy = {};
        utils.guard.notNull(proxyOrUrl, { name: 'proxyOrUrl' });
        if (utils.types.isString(proxyOrUrl)) {
            return new ProxySettingsData({ url: proxyOrUrl, username, password });
        }
        this._proxy = proxyOrUrl;
    }
    get url() {
        return this._proxy.url;
    }
    getUri() {
        return this.url;
    }
    getUrl() {
        return this.url;
    }
    get username() {
        return this._proxy.username;
    }
    getUsername() {
        return this.username;
    }
    get password() {
        return this.password;
    }
    getPassword() {
        return this.password;
    }
    get isHttpOnly() {
        return undefined;
    }
    getIsHttpOnly() {
        return this.isHttpOnly;
    }
    /** @internal */
    toObject() {
        return this._proxy;
    }
    /** @internal */
    toJSON() {
        return utils.general.toJSON(this._proxy);
    }
    /** @internal */
    toString() {
        return utils.general.toString(this);
    }
}
exports.ProxySettingsData = ProxySettingsData;
