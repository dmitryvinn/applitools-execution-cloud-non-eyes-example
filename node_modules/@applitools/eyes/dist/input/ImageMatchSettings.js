"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageMatchSettingsData = void 0;
const utils = __importStar(require("@applitools/utils"));
const MatchLevel_1 = require("../enums/MatchLevel");
const AccessibilityLevel_1 = require("../enums/AccessibilityLevel");
const AccessibilityGuidelinesVersion_1 = require("../enums/AccessibilityGuidelinesVersion");
const ExactMatchSettings_1 = require("./ExactMatchSettings");
const FloatingMatchSettings_1 = require("./FloatingMatchSettings");
const AccessibilityMatchSettings_1 = require("./AccessibilityMatchSettings");
const Region_1 = require("./Region");
/** @undocumented */
class ImageMatchSettingsData {
    constructor(settings) {
        this._settings = {};
        if (!settings)
            return this;
        if (settings instanceof ImageMatchSettingsData)
            settings = settings.toJSON();
        for (const [key, value] of Object.entries(settings)) {
            ;
            this[key] = value;
        }
    }
    get exact() {
        return this._settings.exact;
    }
    set exact(exact) {
        this._settings.exact = exact;
    }
    getExact() {
        return new ExactMatchSettings_1.ExactMatchSettingsData(this.exact);
    }
    setExact(exact) {
        this.exact = exact;
    }
    get matchLevel() {
        return this._settings.matchLevel;
    }
    set matchLevel(matchLevel) {
        utils.guard.isEnumValue(matchLevel, MatchLevel_1.MatchLevelEnum, { name: 'matchLevel' });
        this._settings.matchLevel = matchLevel;
    }
    getMatchLevel() {
        return this.matchLevel;
    }
    setMatchLevel(matchLevel) {
        this.matchLevel = matchLevel;
    }
    get ignoreCaret() {
        return this._settings.ignoreCaret;
    }
    set ignoreCaret(ignoreCaret) {
        utils.guard.isBoolean(ignoreCaret, { name: 'ignoreCaret', strict: false });
        this._settings.ignoreCaret = ignoreCaret;
    }
    getIgnoreCaret() {
        return this.ignoreCaret;
    }
    setIgnoreCaret(ignoreCaret) {
        this.ignoreCaret = ignoreCaret;
    }
    get useDom() {
        return this._settings.useDom;
    }
    set useDom(useDom) {
        utils.guard.isBoolean(useDom, { name: 'useDom', strict: false });
        this._settings.useDom = useDom;
    }
    getUseDom() {
        return this.useDom;
    }
    setUseDom(useDom) {
        this.useDom = useDom;
    }
    get enablePatterns() {
        return this._settings.enablePatterns;
    }
    set enablePatterns(enablePatterns) {
        utils.guard.isBoolean(enablePatterns, { name: 'enablePatterns', strict: false });
        this._settings.enablePatterns = enablePatterns;
    }
    getEnablePatterns() {
        return this.enablePatterns;
    }
    setEnablePatterns(enablePatterns) {
        this.enablePatterns = enablePatterns;
    }
    get ignoreDisplacements() {
        return this._settings.ignoreDisplacements;
    }
    set ignoreDisplacements(ignoreDisplacements) {
        utils.guard.isBoolean(ignoreDisplacements, { name: 'ignoreDisplacements', strict: false });
        this._settings.ignoreDisplacements = ignoreDisplacements;
    }
    getIgnoreDisplacements() {
        return this.ignoreDisplacements;
    }
    setIgnoreDisplacements(ignoreDisplacements) {
        this.ignoreDisplacements = ignoreDisplacements;
    }
    get ignoreRegions() {
        return this._settings.ignoreRegions;
    }
    set ignoreRegions(ignoreRegions) {
        utils.guard.isArray(ignoreRegions, { name: 'ignoreRegions', strict: false });
        this._settings.ignoreRegions = ignoreRegions !== null && ignoreRegions !== void 0 ? ignoreRegions : [];
    }
    getIgnoreRegions() {
        var _a, _b;
        return (_b = (_a = this.ignoreRegions) === null || _a === void 0 ? void 0 : _a.map(region => new Region_1.RegionData(region))) !== null && _b !== void 0 ? _b : [];
    }
    setIgnoreRegions(ignoreRegions) {
        this.ignoreRegions = ignoreRegions;
    }
    get layoutRegions() {
        return this._settings.layoutRegions;
    }
    set layoutRegions(layoutRegions) {
        utils.guard.isArray(layoutRegions, { name: 'layoutRegions', strict: false });
        this._settings.layoutRegions = layoutRegions !== null && layoutRegions !== void 0 ? layoutRegions : [];
    }
    get layout() {
        return this.layoutRegions;
    }
    set layout(layoutRegions) {
        this.layoutRegions = layoutRegions;
    }
    getLayoutRegions() {
        var _a, _b;
        return (_b = (_a = this.layoutRegions) === null || _a === void 0 ? void 0 : _a.map(region => new Region_1.RegionData(region))) !== null && _b !== void 0 ? _b : [];
    }
    setLayoutRegions(layoutRegions) {
        this.layoutRegions = layoutRegions;
    }
    get strictRegions() {
        return this._settings.strictRegions;
    }
    set strictRegions(strictRegions) {
        utils.guard.isArray(strictRegions, { name: 'strictRegions', strict: false });
        this._settings.strictRegions = strictRegions !== null && strictRegions !== void 0 ? strictRegions : [];
    }
    get strict() {
        return this.strictRegions;
    }
    set strict(strictRegions) {
        this.strictRegions = strictRegions;
    }
    getStrictRegions() {
        var _a, _b;
        return (_b = (_a = this.strictRegions) === null || _a === void 0 ? void 0 : _a.map(region => new Region_1.RegionData(region))) !== null && _b !== void 0 ? _b : [];
    }
    setStrictRegions(strictRegions) {
        this.strictRegions = strictRegions;
    }
    get contentRegions() {
        return this._settings.contentRegions;
    }
    set contentRegions(contentRegions) {
        utils.guard.isArray(contentRegions, { name: 'contentRegions', strict: false });
        this._settings.contentRegions = contentRegions !== null && contentRegions !== void 0 ? contentRegions : [];
    }
    get content() {
        return this.contentRegions;
    }
    set content(contentRegions) {
        this.contentRegions = contentRegions;
    }
    getContentRegions() {
        var _a, _b;
        return (_b = (_a = this.contentRegions) === null || _a === void 0 ? void 0 : _a.map(region => new Region_1.RegionData(region))) !== null && _b !== void 0 ? _b : [];
    }
    setContentRegions(contentRegions) {
        this.contentRegions = contentRegions;
    }
    get floatingRegions() {
        return this._settings.floatingRegions;
    }
    set floatingRegions(floatingRegions) {
        utils.guard.isArray(floatingRegions, { name: 'floatingRegions', strict: false });
        this._settings.floatingRegions = floatingRegions !== null && floatingRegions !== void 0 ? floatingRegions : [];
    }
    get floating() {
        return this.floatingRegions;
    }
    set floating(floatingRegions) {
        this.floatingRegions = floatingRegions;
    }
    getFloatingRegions() {
        var _a, _b;
        return (_b = (_a = this.floatingRegions) === null || _a === void 0 ? void 0 : _a.map(region => new FloatingMatchSettings_1.FloatingMatchSettingsData(region))) !== null && _b !== void 0 ? _b : [];
    }
    setFloatingRegions(floatingRegions) {
        this.floatingRegions = floatingRegions;
    }
    get accessibilityRegions() {
        return this._settings.accessibilityRegions;
    }
    set accessibilityRegions(accessibilityRegions) {
        utils.guard.isArray(accessibilityRegions, { name: 'accessibilityRegions', strict: false });
        this._settings.accessibilityRegions = accessibilityRegions !== null && accessibilityRegions !== void 0 ? accessibilityRegions : [];
    }
    get accessibility() {
        return this.accessibilityRegions;
    }
    set accessibility(accessibilityRegions) {
        this.accessibilityRegions = accessibilityRegions;
    }
    getAccessibilityRegions() {
        var _a, _b;
        return ((_b = (_a = this.accessibilityRegions) === null || _a === void 0 ? void 0 : _a.map(region => new AccessibilityMatchSettings_1.AccessibilityMatchSettingsData(region))) !== null && _b !== void 0 ? _b : []);
    }
    setAccessibilityRegions(accessibilityRegions) {
        this.accessibilityRegions = accessibilityRegions;
    }
    get accessibilitySettings() {
        return this._settings.accessibilitySettings;
    }
    set accessibilitySettings(accessibilitySettings) {
        if (accessibilitySettings) {
            const { level, guidelinesVersion } = accessibilitySettings;
            utils.guard.isEnumValue(level, AccessibilityLevel_1.AccessibilityLevelEnum, { name: 'accessibilitySettings.level' });
            utils.guard.isEnumValue(guidelinesVersion, AccessibilityGuidelinesVersion_1.AccessibilityGuidelinesVersionEnum, {
                name: 'accessibilitySettings.guidelinesVersion',
            });
        }
        this._settings.accessibilitySettings = accessibilitySettings;
    }
    getAccessibilitySettings() {
        return this.accessibilitySettings;
    }
    setAccessibilitySettings(accessibilitySettings) {
        this.accessibilitySettings = accessibilitySettings;
    }
    /** @internal */
    toObject() {
        return this._settings;
    }
    /** @internal */
    toJSON() {
        return utils.general.toJSON(this._settings);
    }
    /** @internal */
    toString() {
        return utils.general.toString(this);
    }
}
exports.ImageMatchSettingsData = ImageMatchSettingsData;
