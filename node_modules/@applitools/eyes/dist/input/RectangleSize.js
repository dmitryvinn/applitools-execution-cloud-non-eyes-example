"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RectangleSizeData = void 0;
const utils = __importStar(require("@applitools/utils"));
class RectangleSizeData {
    constructor(sizeOrWidth, height) {
        const size = utils.types.isNumber(sizeOrWidth) ? { width: sizeOrWidth, height: height } : sizeOrWidth;
        utils.guard.isNumber(size.width, { name: 'width', gte: 0 });
        utils.guard.isNumber(size.height, { name: 'height', gte: 0 });
        this._size = size;
    }
    get width() {
        return this._size.width;
    }
    set width(width) {
        utils.guard.isNumber(width, { name: 'width', gte: 0 });
        this._size.width = width;
    }
    getWidth() {
        return this.width;
    }
    setWidth(width) {
        this.width = width;
    }
    get height() {
        return this._size.height;
    }
    set height(height) {
        utils.guard.isNumber(height, { name: 'height', gte: 0 });
        this._size.height = height;
    }
    getHeight() {
        return this.height;
    }
    setHeight(height) {
        this.height = height;
    }
    /** @internal */
    toObject() {
        return this._size;
    }
    /** @internal */
    toJSON() {
        return utils.general.toJSON(this._size);
    }
    /** @internal */
    toString() {
        return `${this.width}x${this.height}`;
    }
}
exports.RectangleSizeData = RectangleSizeData;
