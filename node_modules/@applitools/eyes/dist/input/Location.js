"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationData = void 0;
const utils = __importStar(require("@applitools/utils"));
class LocationData {
    constructor(locationOrX, y) {
        const location = utils.types.isNumber(locationOrX) ? { x: locationOrX, y: y } : locationOrX;
        utils.guard.isNumber(location.x, { name: 'x' });
        utils.guard.isNumber(location.y, { name: 'y' });
        this._location = location;
    }
    get x() {
        return this._location.x;
    }
    set x(x) {
        utils.guard.isNumber(x, { name: 'x' });
        this._location.x = x;
    }
    getX() {
        return this.x;
    }
    setX(x) {
        this.x = x;
    }
    get y() {
        return this._location.y;
    }
    set y(y) {
        utils.guard.isNumber(y, { name: 'y' });
        this._location.y = y;
    }
    getY() {
        return this.y;
    }
    setY(y) {
        this.y = y;
    }
    /** @internal */
    toObject() {
        return this._location;
    }
    /** @internal */
    toJSON() {
        return utils.general.toJSON(this._location);
    }
    /** @internal */
    toString() {
        return `(${this.x}, ${this.y})`;
    }
}
exports.LocationData = LocationData;
